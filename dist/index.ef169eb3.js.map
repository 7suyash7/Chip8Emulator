{"mappings":"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","sources":["<anon>","src/index.js","src/Chip8.js","src/Monitor.js","src/Keyboard.js","src/Speaker.js"],"sourcesContent":["const $77ee1d236e76bfd2$var$MEM_SIZE = 4096;\nconst $77ee1d236e76bfd2$var$NUM_REGISTERS = 16;\nclass $77ee1d236e76bfd2$var$Chip8 {\n    constructor(monitor, keyboard, speaker){\n        // kind of like a ram\n        this.memory = new Uint8Array($77ee1d236e76bfd2$var$MEM_SIZE);\n        // registers\n        this.v = new Uint8Array($77ee1d236e76bfd2$var$NUM_REGISTERS);\n        // 16 bit index-register\n        this.index = 0;\n        // 16-bit program count register (like a pointer to the line of code that is being currently executed)\n        this.pc = 0x200; // following the specs here.\n        // 16-level stack\n        this.stack = [];\n        // 8-bit register, stack pointer\n        this.sp = 0;\n        // timers for some reason maybe due to animations or something\n        this.delayTimer = 0;\n        // sound timer to play sounds\n        this.soundTimer = 0;\n        // Keyboard later\n        // monitor\n        this.monitor = monitor;\n        // keyboard\n        this.keyboard = keyboard;\n        // speaker\n        this.speaker = speaker;\n        // identify if system is paused\n        this.paused = false;\n        // speed of cpu-cycles\n        this.speed = 10;\n    }\n    loadSpritesIntoMemory() {\n        const sprites = [\n            0xF0,\n            0x90,\n            0x90,\n            0x90,\n            0xF0,\n            0x20,\n            0x60,\n            0x20,\n            0x20,\n            0x70,\n            0xF0,\n            0x10,\n            0xF0,\n            0x80,\n            0xF0,\n            0xF0,\n            0x10,\n            0xF0,\n            0x10,\n            0xF0,\n            0x90,\n            0x90,\n            0xF0,\n            0x10,\n            0x10,\n            0xF0,\n            0x80,\n            0xF0,\n            0x10,\n            0xF0,\n            0xF0,\n            0x80,\n            0xF0,\n            0x90,\n            0xF0,\n            0xF0,\n            0x10,\n            0x20,\n            0x40,\n            0x40,\n            0xF0,\n            0x90,\n            0xF0,\n            0x90,\n            0xF0,\n            0xF0,\n            0x90,\n            0xF0,\n            0x10,\n            0xF0,\n            0xF0,\n            0x90,\n            0xF0,\n            0x90,\n            0x90,\n            0xE0,\n            0x90,\n            0xE0,\n            0x90,\n            0xE0,\n            0xF0,\n            0x80,\n            0x80,\n            0x80,\n            0xF0,\n            0xE0,\n            0x90,\n            0x90,\n            0x90,\n            0xE0,\n            0xF0,\n            0x80,\n            0xF0,\n            0x80,\n            0xF0,\n            0xF0,\n            0x80,\n            0xF0,\n            0x80,\n            0x80 // F\n        ];\n        for(let i = 0; i < sprites.length; i++)this.memory[i] = sprites[i];\n    }\n    loadProgramIntoMemory(program) {\n        for(let i = 0; i < program.length; i++)this.memory[0x200 + i] = program[i];\n    }\n    cycle() {\n        for(let i = 0; i < this.speed; i++)if (!this.paused) {\n            let opcode = this.memory[this.pc] << 8 | this.memory[this.pc + 1];\n            this.interpretInstruction(opcode);\n        }\n        if (!this.paused) this.updateTimers();\n        this.sound();\n        this.monitor.paint();\n    }\n    updateTimers() {\n        if (this.delayTimer > 0) this.delayTimer -= 1;\n        if (this.soundTimer > 0) this.sounderTimer -= 1;\n    }\n    sound() {\n        if (this.soundTimer > 0) this.speaker.play();\n        else this.speaker.stop();\n    }\n    interpretInstruction(instruction) {\n        // console.log(`Opcode: ${instruction.toString(16)}`);\n        // adding with two because each instruction is 2 bytes\n        this.pc += 2;\n        const x = (instruction & 0x0F00) >> 8;\n        const y = (instruction & 0x00F0) >> 4;\n        // the instructions, v = register\n        switch(instruction & 0xF000){\n            case 0x0000:\n                switch(instruction){\n                    case 0x00E0:\n                        this.monitor.clear(); // CLR -> Clear\n                        break;\n                    case 0x0EE:\n                        this.pc = this.stack.pop(); // RET -> Return from a function\n                        break;\n                }\n                break;\n            case 0x1000:\n                this.pc = instruction & 0xFFF; // JP addr\n                break;\n            case 0x2000:\n                this.stack.push(this.pc);\n                this.pc = instruction & 0xFFF; // CALL addr\n                break;\n            case 0x3000:\n                if (this.v[x] === (instruction & 0xFF)) this.pc += 2; // SE Vx, byte\n                break;\n            case 0x4000:\n                if (this.v[x] != (instruction & 0xFF)) this.pc += 2; // SNE Vx, byte\n                break;\n            case 0x5000:\n                if (this.v[x] === this.v[y]) this.pc += 2; // SE Vx, byte\n                break;\n            case 0x6000:\n                this.v[x] = instruction & 0xFF; // LD Vx, byte\n                break;\n            case 0x7000:\n                this.v[x] += instruction & 0xFF; // ADD Vx, byte\n                break;\n            case 0x8000:\n                switch(instruction & 0xF){\n                    case 0x0:\n                        this.v[x] = this.v[y]; // LD Vx, Vy\n                        break;\n                    case 0x1:\n                        this.v[x], this.v[y]; // OR Vx, Vy\n                        break;\n                    case 0x2:\n                        this.v[x] &= this.v[y]; // AND Vx, Vy\n                        break;\n                    case 0x3:\n                        this.v[x] ^= this.v[y]; // XOR Vx, Vy\n                    case 0x4:\n                        let sum = this.v[x] += this.v[y]; // ADD Vx, Vy\n                        this.v[0xF] = 0;\n                        if (sum > 0xFF) this.v[0xF] = 1;\n                        this.v[x] = sum;\n                        break;\n                    case 0x5:\n                        this.v[0xF] = 0;\n                        if (this.v[x] > this.v[y]) this.v[0xF] = 1; // SUB Vx, Vy\n                        this.v[x] -= this.v[y];\n                        break;\n                    case 0x6:\n                        this.v[0xF] = this.v[x] & 0x1; // SHR Vx, Vy\n                        this.v[x] >>= 1;\n                        break;\n                    case 0x7:\n                        this.x[0xF] = 0;\n                        if (this.v[y] > this.v[x]) this.v[0xF] = 1; // SUBN Vx, Vy\n                        this.v[x] = this.v[y] - this.v[x];\n                        break;\n                    case 0xE:\n                        this.v[0xF] = this.v[x] & 0x80; // SHL Vx, {, Vy}\n                        this.v[x];\n                        break;\n                    default:\n                        throw new Error(\"INCORRECT OPCODE\");\n                }\n                break;\n            case 0x9000:\n                if (this.v[x] != this.v[y]) this.pc += 2; // SNE Vx, Vy\n                break;\n            case 0xA000:\n                this.index = instruction & 0xFFF; // LD I, addr\n                break;\n            case 0xB000:\n                this.pc = (instruction & 0xFFF) + this.v[0]; // JP V0, addr\n                break;\n            case 0xC000:\n                let rand = Math.floor(Math.random() * 0xFF); // RND Vx, byte\n                this.v[x] = rand & (instruction & 0xFF);\n                break;\n            case 0xD000:\n                let width = 8; // DRW Vx, Vy, nibble\n                let height = instruction & 0xF;\n                this.v[0xF] = 0;\n                for(let row = 0; row < height; row++){\n                    let sprite = this.memory[this.index + row];\n                    for(let col = 0; col < width; col++){\n                        if ((sprite & 0x80) > 0) {\n                            if (this.monitor.setPixel(this.v[x] + col, this.v[y] + row)) this.v[0xF] = 1;\n                        }\n                        sprite <<= 1;\n                    }\n                }\n                break;\n            case 0xE000:\n                switch(instruction & 0xFF){\n                    case 0x9E:\n                        if (this.keyboard.isKeyPressed(this.v[x])) this.pc += 2; // SKP Vx\n                        break;\n                    case 0xA1:\n                        if (!this.keyboard.isKeyPressed(this.v[x])) this.pc += 2; // SKNP Vx\n                        break;\n                    default:\n                        throw new Error(\"INCORRECT OPCODE\");\n                }\n                break;\n            case 0xF000:\n                switch(instruction & 0xFF){\n                    case 0x07:\n                        this.v[x] = this.delayTimer; // LD Vx, DT\n                        break;\n                    case 0x0A:\n                        this.paused = true; // LD Vx, K\n                        let nextKeyPress = (key)=>{\n                            this.v[x] = key;\n                            this.paused = false;\n                        };\n                        this.keyboard.onNextKeyPress = nextKeyPress.bind(this);\n                        break;\n                    case 0x15:\n                        this.delayTimer = this.v[x]; // LD Dt, Vx\n                        break;\n                    case 0x18:\n                        this.soundTimer = this.v[x]; // LD ST, Vx\n                    case 0x1E:\n                        this.index += this.v[x]; // ADD I, Vx\n                        break;\n                    case 0x29:\n                        this.index = this.v[x] * 5; // LD F, Vx\n                        break;\n                    case 0x33:\n                        this.memory[this.index] = parseInt(this.v[x] / 100); // LD B, Vx\n                        this.memory[this.index + 1] = parseInt(this.v[x] % 100 / 10);\n                        this.memory[this.index + 2] = parseInt(this.v[x] % 10);\n                        break;\n                    case 0x55:\n                        for(let ri = 0; ri <= x; ri++)this.memory[this.index + ri] = this.v[ri];\n                        break;\n                    case 0x65:\n                        for(let ri = 0; ri <= x; ri++)this.v[ri] = this.memory[this.index + 1];\n                        break;\n                    default:\n                        throw new Error(\"0xF BAD OPCODE\" + instruction);\n                }\n                break;\n            default:\n                throw new Error(\"BAD OPCODE\");\n        }\n    }\n}\nvar $77ee1d236e76bfd2$export$2e2bcd8739ae039 = $77ee1d236e76bfd2$var$Chip8;\n\n\nclass $e6f0a14715dbdf71$var$Monitor {\n    constructor(scale){\n        this.cols = 64;\n        this.rows = 32;\n        this.scale = scale;\n        this.canvas = document.getElementById(\"screen\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.canvas.width = this.cols * this.scale;\n        this.canvas.height = this.rows * this.scale;\n        this.display = new Array(this.cols * this.rows);\n    }\n    setPixel(x, y) {\n        if (x > this.cols) x -= this.cols;\n        else if (x < 0) x += this.cols;\n        if (y > this.rows) y -= this.rows;\n        else if (y < 0) y += this.rows;\n        this.display[x + y * this.cols] ^= 1;\n        return !this.display[x + y * this.cols];\n    }\n    clear() {\n        this.display = new Array(this.cols * this.rows);\n    }\n    paint() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        for(let i = 0; i < this.cols * this.rows; i++){\n            let x = i % this.cols * this.scale;\n            let y = Math.floor(i / this.cols) * this.scale;\n            if (this.display[i]) {\n                this.ctx.fillStyle = \"#000\";\n                this.ctx.fillRect(x, y, this.scale, this.scale);\n            }\n        }\n    }\n    testRender() {\n        this.setPixel(0, 0);\n        this.setPixel(5, 2);\n        this.paint();\n    }\n}\nvar $e6f0a14715dbdf71$export$2e2bcd8739ae039 = $e6f0a14715dbdf71$var$Monitor;\n\n\nclass $e2f41a7d8f3632a6$var$Keyboard {\n    constructor(){\n        this.keymap = {\n            49: 0x1,\n            50: 0x2,\n            51: 0x3,\n            52: 0xc,\n            81: 0x4,\n            87: 0x5,\n            69: 0x6,\n            82: 0xD,\n            65: 0x7,\n            83: 0x8,\n            68: 0x9,\n            70: 0xE,\n            90: 0xA,\n            88: 0x0,\n            67: 0xB,\n            86: 0xF // V F\n        };\n        this.keysPressed = [];\n        this.onNextKeyPress = null;\n        window.addEventListener(\"keydown\", this.onKeyDown.bind(this), false);\n        window.addEventListener(\"keyup\", this.onKeyUp.bind(this), false);\n    }\n    isKeyPressed(keyCode) {\n        return this.keysPressed[keyCode];\n    }\n    onKeyDown(event) {\n        let key = this.keymap[event.which];\n        this.keysPressed[key] = true;\n        if (this.onNextKeyPress !== null && key) {\n            this.onNextKeyPress(parseInt(key));\n            this.onNextKeyPress = null;\n        }\n    }\n    onKeyUp(event) {\n        let key = this.keymap[event.which];\n        this.keysPressed[key] = false;\n    }\n}\nvar $e2f41a7d8f3632a6$export$2e2bcd8739ae039 = $e2f41a7d8f3632a6$var$Keyboard;\n\n\nconst $98b51fe18667fc5b$var$FREQUENCY = 440;\nclass $98b51fe18667fc5b$var$Speaker {\n    constructor(){\n        this.audioCtx = new window.AudioContext();\n        window.addEventListener(\"click\", ()=>{\n            this.audioCtx.resume();\n        });\n    }\n    play() {\n        if (!this.oscillator) {\n            this.oscillator = this.audioCtx.createOscillator();\n            this.oscillator.frequency.setValueAtTime($98b51fe18667fc5b$var$FREQUENCY, this.audioCtx.currentTime);\n            this.oscillator.type = \"square\";\n            this.oscillator.connect(this.audioCtx.destination);\n            this.oscillator.start();\n            this.oscillator.onended = ()=>{\n                this.oscillator = null;\n            };\n        }\n    }\n    stop() {\n        if (this.oscillator) {\n            this.oscillator.stop();\n            this.oscillator.disconnect();\n            this.oscillator = null;\n        }\n    }\n}\nvar $98b51fe18667fc5b$export$2e2bcd8739ae039 = $98b51fe18667fc5b$var$Speaker;\n\n\n\nconst $35da740d59af89ba$var$FPS = 60;\nlet $35da740d59af89ba$var$loop, $35da740d59af89ba$var$fpsInterval, $35da740d59af89ba$var$startTime, $35da740d59af89ba$var$now, $35da740d59af89ba$var$then, $35da740d59af89ba$var$elapsed;\nconst $35da740d59af89ba$var$romSelector = document.getElementById(\"roms\");\n$35da740d59af89ba$var$romSelector.addEventListener(\"change\", ()=>{\n    const rom = $35da740d59af89ba$var$romSelector.options[$35da740d59af89ba$var$romSelector.selectedIndex].value;\n    console.log(rom);\n    $35da740d59af89ba$var$loadRom(rom);\n});\nconst $35da740d59af89ba$var$reloadButton = document.getElementById(\"reload\");\n$35da740d59af89ba$var$reloadButton.addEventListener(\"click\", ()=>{\n    console.log(\"Click\");\n    const rom = $35da740d59af89ba$var$romSelector.options[$35da740d59af89ba$var$romSelector.selectedIndex].value;\n    console.log(rom);\n    $35da740d59af89ba$var$loadRom(rom);\n});\nconst $35da740d59af89ba$var$loadingText = document.getElementById(\"loading-text\");\nfunction $35da740d59af89ba$var$loadRom(romName) {\n    const monitor = new (0, $e6f0a14715dbdf71$export$2e2bcd8739ae039)(15);\n    const keyboard = new (0, $e2f41a7d8f3632a6$export$2e2bcd8739ae039)();\n    const speaker = new (0, $98b51fe18667fc5b$export$2e2bcd8739ae039)();\n    const chip8 = new (0, $77ee1d236e76bfd2$export$2e2bcd8739ae039)(monitor, keyboard, speaker);\n    const playBtn = document.getElementById(\"play\");\n    const stopBtn = document.getElementById(\"stop\");\n    playBtn.onclick(()=>{\n        speaker.play();\n    });\n    stopBtn.onclick(()=>{\n        speaker.stop();\n    });\n    window.cancelAnimationFrame($35da740d59af89ba$var$loop);\n    function step() {\n        $35da740d59af89ba$var$now = Date.now();\n        $35da740d59af89ba$var$elapsed = $35da740d59af89ba$var$now - $35da740d59af89ba$var$then;\n        if ($35da740d59af89ba$var$elapsed > $35da740d59af89ba$var$fpsInterval) {\n            chip8.cycle();\n            $35da740d59af89ba$var$then = $35da740d59af89ba$var$now - $35da740d59af89ba$var$elapsed % $35da740d59af89ba$var$fpsInterval;\n        }\n        $35da740d59af89ba$var$loop = requestAnimationFrame(step);\n    }\n    const url = `/rom/${romName}`;\n    $35da740d59af89ba$var$reloadButton.disabled = true;\n    $35da740d59af89ba$var$loadingText.innerHTML = \"Loading\" + romName + \"...\";\n    fetch(url).then((res)=>res.arrayBuffer()).then((buffer)=>{\n        console.log(buffer.byteLength);\n        const program = new Uint8Array(buffer);\n        console.log(\"Loaded Program: ${program}\", program);\n        $35da740d59af89ba$var$fpsInterval = 1000 / $35da740d59af89ba$var$FPS;\n        $35da740d59af89ba$var$then = Date.now();\n        $35da740d59af89ba$var$startTime = $35da740d59af89ba$var$then;\n        $35da740d59af89ba$var$reloadButton.disabled = false;\n        chip8.loadSpritesIntoMemory();\n        chip8.loadProgramIntoMemory(program);\n        console.log(program);\n        $35da740d59af89ba$var$loop = requestAnimationFrame(step);\n        $35da740d59af89ba$var$loadingText.innerHTML = \"Playing \" + romName + \" !\";\n    });\n}\n\n\n//# sourceMappingURL=index.ef169eb3.js.map\n","import Chip8 from \"./Chip8\";\nimport Monitor from \"./Monitor\";\nimport Keyboard from \"./Keyboard\";\nimport Speaker from \"./Speaker\";\nimport '../styles.css';\nimport Speaker from \"./Speaker\";\n\nconst FPS = 60;\nlet loop, fpsInterval, startTime, now, then, elapsed;\n\nconst romSelector = document.getElementById('roms');\nromSelector.addEventListener('change', () => {\n  const rom = romSelector.options[romSelector.selectedIndex].value;\n  console.log(rom);\n  loadRom(rom);\n});\n\nconst reloadButton = document.getElementById('reload');\nreloadButton.addEventListener('click', () => {\n  console.log('Click');\n  const rom = romSelector.options[romSelector.selectedIndex].value;\n  console.log(rom);\n  loadRom(rom);\n});\n\nconst loadingText = document.getElementById('loading-text');\n\nfunction loadRom(romName) {\n  const monitor = new Monitor(15);\n  const keyboard = new Keyboard();\n  const speaker = new Speaker();\n  const chip8 = new Chip8(monitor, keyboard, speaker);\n\n\n  const playBtn = document.getElementById('play');\n  const stopBtn = document.getElementById('stop');\n\n  playBtn.onclick(() => {\n    speaker.play();\n  });\n\n  stopBtn.onclick(() => {\n    speaker.stop();\n  });\n\n  window.cancelAnimationFrame(loop);\n\n  function step() {\n    now = Date.now();\n    elapsed = now - then;\n\n    if(elapsed > fpsInterval) {\n      chip8.cycle();\n      then = now - (elapsed % fpsInterval);\n    }\n\n    loop = requestAnimationFrame(step);\n  }\n\n  const url = `/rom/${romName}`;\n  reloadButton.disabled = true;\n  loadingText.innerHTML = 'Loading' + romName + '...';\n\n  fetch(url).then(res => res.arrayBuffer())\n          .then(buffer => {\n            console.log(buffer.byteLength);\n\n            const program = new Uint8Array(buffer);\n            console.log('Loaded Program: ${program}', program);\n\n            fpsInterval = 1000 / FPS;\n            then = Date.now();\n            startTime = then;\n            reloadButton.disabled = false;\n\n            chip8.loadSpritesIntoMemory();\n            chip8.loadProgramIntoMemory(program);\n            console.log(program);\n\n            loop = requestAnimationFrame(step);\n            loadingText.innerHTML = 'Playing ' + romName + ' !';\n          });\n}\n","const MEM_SIZE = 4096;\nconst NUM_REGISTERS = 16;\n\nclass Chip8 {\n\n  constructor(monitor, keyboard, speaker) {\n\n    // kind of like a ram\n    this.memory = new Uint8Array(MEM_SIZE);\n    // registers\n    this.v = new Uint8Array(NUM_REGISTERS);\n\n    // 16 bit index-register\n    this.index = 0;\n    // 16-bit program count register (like a pointer to the line of code that is being currently executed)\n    this.pc = 0x200; // following the specs here.\n\n    // 16-level stack\n    this.stack = [];\n    // 8-bit register, stack pointer\n    this.sp = 0;\n\n    // timers for some reason maybe due to animations or something\n    this.delayTimer = 0;\n    // sound timer to play sounds\n    this.soundTimer = 0;\n\n    // Keyboard later\n\n    // monitor\n    this.monitor = monitor;\n\n    // keyboard\n    this.keyboard = keyboard;\n\n    // speaker\n    this.speaker = speaker;\n\n    // identify if system is paused\n    this.paused = false;\n\n    // speed of cpu-cycles\n    this.speed = 10;\n\n  };\n\n  loadSpritesIntoMemory() {\n    const sprites = [\n        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0\n        0x20, 0x60, 0x20, 0x20, 0x70, // 1\n        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2\n        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3\n        0x90, 0x90, 0xF0, 0x10, 0x10, // 4\n        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5\n        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6\n        0xF0, 0x10, 0x20, 0x40, 0x40, // 7\n        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8\n        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9\n        0xF0, 0x90, 0xF0, 0x90, 0x90, // A\n        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B\n        0xF0, 0x80, 0x80, 0x80, 0xF0, // C\n        0xE0, 0x90, 0x90, 0x90, 0xE0, // D\n        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E\n        0xF0, 0x80, 0xF0, 0x80, 0x80  // F\n    ];\n    for (let i = 0; i < sprites.length; i++) {\n        this.memory[i] = sprites[i];\n    }\n  };\n\n  loadProgramIntoMemory(program) {\n    for(let i = 0; i < program.length; i++) {\n      this.memory[0x200 + i] = program[i];\n    }\n  };\n\n  cycle() {\n    for(let i = 0; i < this.speed; i++) {\n      if(!this.paused) {\n        let opcode = (this.memory[this.pc] << 8 | this.memory[this.pc + 1]);\n        this.interpretInstruction(opcode);\n      }\n    }\n\n    if(!this.paused) this.updateTimers();\n\n    this.sound();\n    this.monitor.paint();\n    \n  };\n\n  updateTimers() {\n    if(this.delayTimer > 0) this.delayTimer -= 1;\n\n    if(this.soundTimer > 0) this.sounderTimer -= 1;\n  };\n\n  sound() {\n    if(this.soundTimer > 0) {\n      this.speaker.play();\n    } else {\n      this.speaker.stop();\n    }\n  };\n\n  interpretInstruction(instruction) {\n    // console.log(`Opcode: ${instruction.toString(16)}`);\n    // adding with two because each instruction is 2 bytes\n    this.pc += 2;\n\n    const x = (instruction & 0x0F00) >> 8;\n\n    const y = (instruction & 0x00F0) >> 4;\n\n    // the instructions, v = register\n\n    switch(instruction & 0xF000) {\n      case 0x0000:\n        switch(instruction) {\n          case 0x00E0:\n            this.monitor.clear(); // CLR -> Clear\n            break;\n          \n            case 0x0EE:\n              this.pc = this.stack.pop(); // RET -> Return from a function\n              break; \n        }\n        break;\n      case 0x1000:\n        this.pc = instruction & 0xFFF; // JP addr\n        break;\n      case 0x2000:\n        this.stack.push(this.pc);\n        this.pc = instruction & 0xFFF; // CALL addr\n        break;\n      case 0x3000:\n        if(this.v[x] === (instruction & 0xFF)) this.pc +=2; // SE Vx, byte\n        break;\n      case 0x4000:\n        if(this.v[x] != (instruction & 0xFF)) this.pc +=2; // SNE Vx, byte\n        break;\n      case 0x5000:\n        if(this.v[x] === this.v[y]) this.pc += 2; // SE Vx, byte\n        break;\n      case 0x6000:\n        this.v[x] = (instruction & 0xFF); // LD Vx, byte\n        break;\n      case 0x7000:\n        this.v[x] += (instruction & 0xFF); // ADD Vx, byte\n        break;\n      case 0x8000:\n        switch(instruction & 0xF) {\n          case 0x0:\n            this.v[x] = this.v[y]; // LD Vx, Vy\n            break;\n          case 0x1:\n            this.v[x] != this.v[y]; // OR Vx, Vy\n            break;\n          case 0x2:\n            this.v[x] &= this.v[y]; // AND Vx, Vy\n            break;\n          case 0x3:\n            this.v[x] ^= this.v[y]; // XOR Vx, Vy\n          case 0x4:\n            let sum = (this.v[x] += this.v[y]); // ADD Vx, Vy\n\n            this.v[0xF] = 0;\n\n            if (sum > 0xFF) this.v[0xF] = 1;\n\n            this.v[x] = sum;\n            break;\n          case 0x5:\n            this.v[0xF] = 0;\n            \n            if(this.v[x] > this.v[y]) this.v[0xF] = 1; // SUB Vx, Vy\n\n            this.v[x] -= this.v[y];\n            break;\n          case 0x6:\n            this.v[0xF] = this.v[x] & 0x1; // SHR Vx, Vy\n            this.v[x] >>= 1;\n            break;\n          case 0x7:\n            this.x[0xF] = 0;\n            if(this.v[y] > this.v[x]) this.v[0xF] = 1; // SUBN Vx, Vy\n            \n            this.v[x] = this.v[y] - this.v[x];\n            break;\n          case 0xE:\n            this.v[0xF] = this.v[x] & 0x80; // SHL Vx, {, Vy}\n            this.v[x] << 1;\n            break;\n          default:\n            throw new Error('INCORRECT OPCODE');\n        }\n        break;\n      case 0x9000:\n        if(this.v[x] != this.v[y]) this.pc +=2; // SNE Vx, Vy\n        break;\n      case 0xA000:\n        this.index = instruction & 0xFFF; // LD I, addr\n        break;\n      case 0xB000:\n        this.pc = (instruction & 0xFFF) + this.v[0]; // JP V0, addr\n        break;\n      case 0xC000:\n        let rand = Math.floor(Math.random() * 0xFF); // RND Vx, byte\n        this.v[x] = rand & (instruction & 0xFF);\n        break;\n      case 0xD000:\n        let width = 8; // DRW Vx, Vy, nibble\n        let height = (instruction & 0xF);\n\n        this.v[0xF] = 0;\n\n        for(let row = 0; row < height; row++) {\n          let sprite = this.memory[this.index + row];\n\n          for(let col = 0; col < width; col++) {\n            if((sprite & 0x80) > 0) {\n              if(this.monitor.setPixel(this.v[x] + col, this.v[y] + row)) {\n                this.v[0xF] = 1;\n              }\n            }\n            sprite <<= 1;\n          }\n        }\n        break;\n      case 0xE000:\n        switch(instruction & 0xFF) {\n          case 0x9E:\n            if(this.keyboard.isKeyPressed(this.v[x])) this.pc += 2; // SKP Vx\n            break;\n          case 0xA1:\n            if(!this.keyboard.isKeyPressed(this.v[x])) this.pc += 2; // SKNP Vx\n            break;\n          default:\n            throw new Error('INCORRECT OPCODE');\n        }\n        break;\n      case 0xF000:\n        switch(instruction & 0xFF) {\n          case 0x07:\n            this.v[x]  = this.delayTimer; // LD Vx, DT\n            break;\n          case 0x0A:\n            this.paused = true; // LD Vx, K\n\n            let nextKeyPress = (key) => {\n              this.v[x] = key;\n              this.paused = false;\n            };\n\n            this.keyboard.onNextKeyPress = nextKeyPress.bind(this);\n            break;\n          case 0x15:\n            this.delayTimer = this.v[x]; // LD Dt, Vx\n            break;\n          case 0x18:\n            this.soundTimer = this.v[x]; // LD ST, Vx\n          case 0x1E:\n            this.index += this.v[x]; // ADD I, Vx\n            break;\n          case 0x29:\n            this.index = this.v[x] * 5; // LD F, Vx\n            break;\n          case 0x33:\n            this.memory[this.index] = parseInt(this.v[x] / 100); // LD B, Vx\n            this.memory[this.index + 1] = parseInt((this.v[x] % 100) / 10);\n            this.memory[this.index + 2] = parseInt(this.v[x] % 10);\n            break;\n          case 0x55:\n            for(let ri = 0; ri <= x; ri++) { // LD [I], Vx\n              this.memory[this.index + ri] = this.v[ri];\n            }\n            break;\n          case 0x65:\n            for(let ri = 0; ri <= x; ri++) { // LD Vx, [I]\n              this.v[ri] = this.memory[this.index + 1];\n            }\n            break;\n          default:\n            throw new Error('0xF BAD OPCODE' + instruction);\n        }\n        break;\n      default:\n        throw new Error('BAD OPCODE');\n    }\n  };\n\n};\n\nexport default Chip8;","class Monitor {\n  constructor(scale) {\n    this.cols = 64;\n    this.rows = 32;\n\n    this.scale = scale;\n\n    this.canvas = document.getElementById('screen');\n    this.ctx = this.canvas.getContext('2d');\n\n    this.canvas.width = this.cols * this.scale;\n    this.canvas.height = this.rows * this.scale;\n\n    this.display = new Array(this.cols * this.rows);\n  }\n\n  setPixel(x, y) {\n    if (x > this.cols) {\n      x -= this.cols;\n    } else if (x < 0) {\n      x += this.cols;\n    }\n\n    if (y > this.rows) {\n      y -= this.rows;\n    } else if (y < 0) {\n      y += this.rows;\n    }\n\n    this.display[x + (y * this.cols)] ^= 1;\n\n    return !this.display[x + (y * this.cols)];\n  }\n\n  clear() {\n    this.display = new Array(this.cols * this.rows);\n  }\n\n  paint() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    for(let i = 0; i < this.cols * this.rows; i++) {\n      let x = (i % this.cols) * this.scale;\n\n      let y = Math.floor(i / this.cols) * this.scale;\n\n      if(this.display[i]) {\n        this.ctx.fillStyle = '#000';\n        this.ctx.fillRect(x, y, this.scale, this.scale);\n      }\n    }\n  }\n\n  testRender() {\n    this.setPixel(0, 0);\n    this.setPixel(5, 2);\n    this.paint();\n  }\n\n}\n\nexport default Monitor;","class Keyboard {\n  constructor() {\n    this.keymap = {\n        49: 0x1, // 1 1\n        50: 0x2, // 2 2\n        51: 0x3, // 3 3\n        52: 0xc, // 4 C\n        81: 0x4, // Q 4\n        87: 0x5, // W 5\n        69: 0x6, // E 6\n        82: 0xD, // R D\n        65: 0x7, // A 7\n        83: 0x8, // S 8\n        68: 0x9, // D 9\n        70: 0xE, // F E\n        90: 0xA, // Z A\n        88: 0x0, // X 0\n        67: 0xB, // C B\n        86: 0xF  // V F\n    };\n\n    this.keysPressed = [];\n    this.onNextKeyPress = null;\n\n    window.addEventListener('keydown', this.onKeyDown.bind(this), false);\n    window.addEventListener('keyup', this.onKeyUp.bind(this), false);\n  }\n\n  isKeyPressed(keyCode) {\n    return this.keysPressed[keyCode];\n  }\n\n  onKeyDown(event) {\n    let key = this.keymap[event.which];\n    this.keysPressed[key] = true;\n\n    if(this.onNextKeyPress !== null && key) {\n      this.onNextKeyPress(parseInt(key));\n      this.onNextKeyPress = null;\n    }\n  }\n\n  onKeyUp(event) {\n    let key = this.keymap[event.which];\n    this.keysPressed[key] = false;\n  }\n\n};\n\nexport default Keyboard;","const FREQUENCY = 440;\n\nclass Speaker {\n  constructor() {\n    this.audioCtx = new window.AudioContext();\n\n    window.addEventListener('click', () => {\n      this.audioCtx.resume();\n    });\n  }\n\n  play() {\n    if(!this.oscillator) {\n      this.oscillator = this.audioCtx.createOscillator();\n      this.oscillator.frequency.setValueAtTime(FREQUENCY, this.audioCtx.currentTime);\n      this.oscillator.type = 'square';\n\n      this.oscillator.connect(this.audioCtx.destination);\n      this.oscillator.start();\n      \n      this.oscillator.onended = () => {\n        this.oscillator = null;\n      };\n    }\n  }\n\n  stop() {\n    if(this.oscillator) {\n      this.oscillator.stop();\n      this.oscillator.disconnect();\n      this.oscillator = null;\n    }\n  }\n};\n\nexport default Speaker;"],"names":["$35da740d59af89ba$var$loop","$35da740d59af89ba$var$fpsInterval","$35da740d59af89ba$var$now","$35da740d59af89ba$var$then","$35da740d59af89ba$var$elapsed","$77ee1d236e76bfd2$export$2e2bcd8739ae039","constructor","monitor","keyboard","speaker","memory","Uint8Array","v","index","pc","stack","sp","delayTimer","soundTimer","paused","speed","loadSpritesIntoMemory","sprites","i","length","loadProgramIntoMemory","program","cycle","opcode","interpretInstruction","updateTimers","sound","paint","sounderTimer","play","stop","instruction","x","y","clear","pop","push","sum","Error","rand","Math","floor","random","height","row","sprite","col","setPixel","isKeyPressed","onNextKeyPress","nextKeyPress","key","bind","parseInt","ri","$e6f0a14715dbdf71$export$2e2bcd8739ae039","scale","cols","rows","canvas","document","getElementById","ctx","getContext","width","display","Array","clearRect","fillStyle","fillRect","testRender","$e2f41a7d8f3632a6$export$2e2bcd8739ae039","keymap","keysPressed","window","addEventListener","onKeyDown","onKeyUp","keyCode","event","which","$98b51fe18667fc5b$export$2e2bcd8739ae039","audioCtx","AudioContext","resume","oscillator","createOscillator","frequency","setValueAtTime","currentTime","type","connect","destination","start","onended","disconnect","$35da740d59af89ba$var$romSelector","rom","options","selectedIndex","value","console","log","$35da740d59af89ba$var$loadRom","$35da740d59af89ba$var$reloadButton","$35da740d59af89ba$var$loadingText","romName","chip8","playBtn","stopBtn","step","Date","now","requestAnimationFrame","onclick","cancelAnimationFrame","url","disabled","innerHTML","fetch","then","res","arrayBuffer","buffer","byteLength"],"version":3,"file":"index.ef169eb3.js.map"}